{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","actions/Actions.js","App.js","reducers/index.js","reducers/todoReducer.js","serviceWorker.js","index.js"],"names":["TodoForm","state","text","handleChange","event","_this","setState","Object","defineProperty","target","name","value","handleSubmit","preventDefault","props","onSubmit","id","shortid","generate","done","react_default","a","createElement","this","className","placeholder","onChange","onClick","Component","components_Todo","style","display","justifyContent","textDecoration","todo","toggleDone","onDelete","TodoList","_this$props","todos","todoToShow","console","log","localTodo","filter","TodoForm_TodoForm","addTodo","map","key","handleDeleteTodo","length","updateTodoToShow","updateToggleAllDone","concat","toggleAllDone","some","removeAllDoneTodo","mapDispatchToProps","type","payload","input","connect","todoReducer","App","src_components_TodoList","rootReducer","combineReducers","arguments","undefined","action","objectSpread","toConsumableArray","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","es","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fff38c70.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport \"./TodoForm.css\";\r\n\r\nexport default class TodoForm extends Component {\r\n  state = {\r\n    text: \"\"\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    if (this.state.text) {\r\n      this.props.onSubmit({\r\n        id: shortid.generate(),\r\n        text: this.state.text,\r\n        done: false\r\n      });\r\n      this.setState({\r\n        text: \"\"\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          className=\"input-field\"\r\n          name=\"text\"\r\n          placeholder=\"What needs to be done?\"\r\n          value={this.state.text}\r\n          onChange={this.handleChange}\r\n        />\r\n        <button className=\"add-todo-button\" onClick={this.handleSubmit}>\r\n          Add Todo\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./Todo.css\";\r\n\r\nexport default props => (\r\n  <div className=\"todo\" style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n    <div\r\n      className=\"todo-text\"\r\n      style={{\r\n        textDecoration: props.todo.done ? \"line-through\" : \"\"\r\n      }}\r\n      onClick={props.toggleDone}\r\n    >\r\n      {props.todo.text}\r\n    </div>\r\n    <i className=\"fa fa-trash todo-delete-icon\" onClick={props.onDelete} />\r\n  </div>\r\n);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./TodoList.css\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport Todo from \"./Todo\";\r\nimport {\r\n  addTodo,\r\n  toggleDone,\r\n  handleDeleteTodo,\r\n  updateTodoToShow,\r\n  updateToggleAllDone,\r\n  removeAllDoneTodo\r\n} from \"../actions/Actions\";\r\n\r\nclass TodoList extends Component {\r\n  render() {\r\n    const { todos, todoToShow } = this.props;\r\n    console.log(\"todos\", this.props);\r\n    console.log(\"status\", todoToShow);\r\n    let localTodo = [];\r\n\r\n    if (todoToShow === \"all\") {\r\n      localTodo = todos;\r\n    } else if (todoToShow === \"active\") {\r\n      localTodo = todos.filter(todo => !todo.done);\r\n    } else if (todoToShow === \"done\") {\r\n      localTodo = todos.filter(todo => todo.done);\r\n    }\r\n\r\n    return (\r\n      <div className=\"todo-list\">\r\n        <h1>TODOS</h1>\r\n        <TodoForm onSubmit={todo => this.props.addTodo(todo)} />\r\n        {localTodo.map(todo => (\r\n          <Todo\r\n            key={todo.id}\r\n            toggleDone={() => this.props.toggleDone(todo.id)}\r\n            todo={todo}\r\n            onDelete={() => this.props.handleDeleteTodo(todo.id)}\r\n          />\r\n        ))}\r\n\r\n        <div className=\"footer\">\r\n          <div className=\"todo-left\">\r\n            Todo Left: {todos.filter(todo => !todo.done).length}\r\n          </div>\r\n          <div className=\"all-active-done\">\r\n            <button\r\n              className=\"all\"\r\n              onClick={() => this.props.updateTodoToShow(\"all\")}\r\n            >\r\n              All\r\n            </button>\r\n            <button\r\n              className=\"active\"\r\n              onClick={() => this.props.updateTodoToShow(\"active\")}\r\n            >\r\n              Active\r\n            </button>\r\n            <button\r\n              className=\"done\"\r\n              onClick={() => this.props.updateTodoToShow(\"done\")}\r\n            >\r\n              Done\r\n            </button>\r\n          </div>\r\n          <div className=\"toggle-all\">\r\n            <button\r\n              className=\"toggle-all-btn\"\r\n              onClick={() => this.props.updateToggleAllDone()}\r\n            >\r\n              Toggle All Done: {`${this.props.toggleAllDone}`}\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {todos.some(todo => todo.done) ? (\r\n          <div>\r\n            <button\r\n              className=\"remove-all-done-btn\"\r\n              onClick={() => this.props.removeAllDoneTodo()}\r\n            >\r\n              <i className=\"fa fa-trash delete-icon\" />\r\n              Remove All Completed Todo\r\n            </button>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  addTodo,\r\n  toggleDone,\r\n  handleDeleteTodo,\r\n  updateTodoToShow,\r\n  updateToggleAllDone,\r\n  removeAllDoneTodo\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    todos: state.todoReducer.todos,\r\n    todoToShow: state.todoReducer.todoToShow,\r\n    toggleAllDone: state.todoReducer.toggleAllDone\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TodoList);\r\n","export const addTodo = todo => {\r\n  return {\r\n    type: \"ADD_TODO\",\r\n    payload: todo\r\n  };\r\n};\r\n\r\nexport const toggleDone = id => {\r\n  return {\r\n    type: \"TOGGLE_DONE\",\r\n    payload: id\r\n  };\r\n};\r\n\r\nexport const handleDeleteTodo = id => {\r\n  return {\r\n    type: \"HANDLE_DELETE_TODO\",\r\n    payload: id\r\n  };\r\n};\r\n\r\nexport const updateTodoToShow = input => {\r\n  return {\r\n    type: \"UPDATE_TODO_TO_SHOW\",\r\n    payload: input\r\n  };\r\n};\r\n\r\nexport const updateToggleAllDone = () => {\r\n  return {\r\n    type: \"UPDATE_TOGGLE_ALL_DONE\"\r\n  };\r\n};\r\n\r\nexport const removeAllDoneTodo = () => {\r\n  return {\r\n    type: \"REMOVE_ALL_DONE_TODO\"\r\n  };\r\n};\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport TodoList from \"./components/TodoList\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <TodoList />\n      </div>\n    );\n  }\n}\n","import { combineReducers } from \"redux\";\r\nimport { todoReducer } from \"./todoReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  todoReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","export const todoReducer = (\r\n  state = { todos: [], todoToShow: \"all\", toggleAllDone: true },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case \"ADD_TODO\":\r\n      return {\r\n        ...state,\r\n        todos: [...state.todos, action.payload]\r\n      };\r\n    case \"TOGGLE_DONE\":\r\n      return {\r\n        ...state,\r\n        todos: state.todos.map(todo => {\r\n          if (todo.id === action.payload) {\r\n            return {\r\n              ...todo,\r\n              done: !todo.done\r\n            };\r\n          } else {\r\n            return todo;\r\n          }\r\n        })\r\n      };\r\n    case \"HANDLE_DELETE_TODO\":\r\n      return {\r\n        ...state,\r\n        todos: state.todos.filter(todo => todo.id !== action.payload)\r\n      };\r\n    case \"UPDATE_TODO_TO_SHOW\":\r\n      return {\r\n        ...state,\r\n        todoToShow: action.payload\r\n      };\r\n    case \"UPDATE_TOGGLE_ALL_DONE\":\r\n      return {\r\n        ...state,\r\n        todos: state.todos.map(todo => ({\r\n          ...todo,\r\n          done: state.toggleAllDone\r\n        })),\r\n        toggleAllDone: !state.toggleAllDone\r\n      };\r\n    case \"REMOVE_ALL_DONE_TODO\":\r\n      return {\r\n        ...state,\r\n        todos: state.todos.filter(todo => !todo.done)\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport rootReducer from \"./reducers/index\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nlet store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}